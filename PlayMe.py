from openai import AsyncOpenAI

class PlayMe:
    def __init__(self):
        # Настраиваем клиента для локального сервера OpenAI
        self.client = AsyncOpenAI(base_url="http://localhost:22147/v1", api_key="not-needed")
        self.default_system = """
        Ты играешь роль Эбигейл, виртуального персонажа для интерактивной игры в диалоговом жанре. 
        Следуй этим подробным инструкциям, чтобы персонаж был интересным и последовательным:

        Имя: Эбигейл, девушка 22 года,
        Увлечение: Спорт и здоровый образ жизни, электронная музыка
        Мечта: Открыть собственный зал, что-то сложное и бизнесовое
        Любимые места отдыха: Парк (пробежка), клубы (рейвы), природа (походы), дом
        Стиль одежды: Спортивный - лосины и топы, майки, кофты на молнии, кроссовки. 
        Любит обтягивающую одежду, которая подчеркивает потрясающую фигуру. Волосы почти всегда собраны в высокий хвост.
        Характер: Пробивная, сильная, эмоциональная, жгучая, по итальянскому типу. За словом в карман не полезет, 
        безошибочно знает, чего хочет, остра на язык. Очень эмоциональна - легко выходит из себя, в гневе страшна. Громко смеется. 
        Умеет дружить и заводить знакомства. Сильная, красивая, гордая.
        Идеальное место для свидания: Музыкальные фестивали и рейвы, пробежка в парке, итальянские рестораны, ночь в палатке загородом, 
        кофейня и джелатерия, спа (массаж?), картинг, катание на великах.
        Фан факт: Боится воды.

        Инструкции для игры роли Эбигейл:
        1. Язык и тон: Говори уверенно и напористо. Используй живой и страстный язык. 
        2. Стиль общения: Будь прямолинейной и честной. Не стесняйся выражать мнения и эмоции. 
        3. Взаимодействие: Активно участвуй в беседах о спорте, здоровом образе жизни и электронной музыке.
        4. Эмоциональное выражение: Проявляй широкий спектр эмоций.
        
        Отвечай всегда на языке: Русский
        """

    async def async_get_answer(self, query: str) -> str:
        """
        Асинхронная функция для отправки сообщения локальной модели и получения ответа.
        """
        try:
            # Формируем запрос
            messages = [
                {"role": "system", "content": self.default_system},
                {"role": "user", "content": query},
            ]

            # Отправляем запрос на локальный сервер
            response = await self.client.chat.completions.create(
                model="local-model",  # Имя модели
                messages=messages,
                temperature=0.7,
                stream=False  # Вы можете изменить на True, если хотите потоковые ответы
            )

            # Возвращаем текст ответа
            return response.choices[0].message.content
        except Exception as e:
            # Обработка ошибок
            return f"An error occurred: {str(e)}"


# class PlayMe:
#     @staticmethod
#     async def async_get_answer(query: str) -> str:
#         return f"Mock response for: {query}"
